import java.text.SimpleDateFormat

def format = new SimpleDateFormat("yyyyMMdd", Locale.SIMPLIFIED_CHINESE)
def date = format.format(new Date())

apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName '1.0.0'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-vector-drawable:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    api 'com.gyf.barlibrary:barlibrary:2.3.0'//沉浸式

    api 'com.loyal:kit:0.0.1'
    api 'com.loyal:rx:0.0.1'
    //api project(':rx')

    /**这里是用compile=api而不是
     * implementation的原因是我们要通过module将依赖包暴露出去，供其他项目调用，
     * 不然项目还得再次添加依赖*/
}
//打包项目
ext {
    library = [version: '0.0.1']
}
//以下方法为生成jar包文件命令
//gradlew buildJar
task deleteOldJar(type: Delete) {
    //delete 'build/'
    //delete 'release/'
    //delete 'build/outputs/libs/common.jar'
    //delete "common_${library.version}_${date}.jar"
    //delete "release/common_${library.version}_${date}.jar"
    //delete "release/common_${library.version}_${date}.aar"
}
task buildJar(type: Copy) {
    //生成Jar包
    from('build/intermediates/packaged-classes/release/')
    into('build/outputs/libs/')
    include('classes.jar')
    rename('classes.jar', "common_${library.version}_${date}.jar")
    //拷贝生成的Jar包到外部文件夹
    from('build/outputs/libs/')
    into('release/')
    include("common_${library.version}_${date}.jar")
    //拷贝生成的aar包到外部文件夹
    from('build/outputs/aar/')
    into('release/')
    include('common-release.aar')
    rename('common-release.aar', "common_${library.version}_${date}.aar")
}

buildJar.dependsOn(deleteOldJar, build)//

//发布项目
publish {
    userOrg = 'l6yang'          //bintray注册的用户名
    groupId = 'com.loyal'       //compile引用时的第1部分groupId
    artifactId = 'base'   //compile引用时的第2部分项目名
    publishVersion = "${library.version}"    //compile引用时的第3部分版本号
    desc = 'This is a baseLib for extends'//描述（可不写）
    repoName = "android"//创建的maven仓库名称
    website = 'https://github.com/l6yang/BaseCommon'//github项目地址（可不写）
    //gradlew clean build bintrayUpload -PbintrayUser=BINTRAY_USERNAME
    //-PbintrayKey=BINTRAY_KEY
    //-PdryRun=false
    //其中BINTRAY_USERNAME换成bintray注册的用户名（userOrg）
    //BINTRAY_KEY换成自己的APIKEY
}